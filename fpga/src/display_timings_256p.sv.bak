// Project F Library - 640x480p60 Display Timings
// (C)2021 Will Green, open source hardware released under the MIT License
// Learn more at https://projectf.io

`default_nettype none
`timescale 1ns / 1ps

module display_timings_tv256p #(
    CORDW=11,   // signed coordinate width (bits)
	 
    H_RES=256,  // horizontal resolution (pixels)
    V_RES=192,  // vertical resolution (lines)	 
	
	 H_BRD=48,	
    H_SYNC=28,  // horizontal sync
    H_BP=96,    // horizontal back porch
	 
    V_BRD=56,    
    V_SYNC=8,   // vertical sync
    
	 
    H_POL=0,    // horizontal sync polarity (0:neg, 1:pos)
    V_POL=0     // vertical sync polarity (0:neg, 1:pos)
    ) (
    input  wire logic clk_pix,  // pixel clock
    input  wire logic rst,      // reset
    output      logic hsync,    // horizontal sync
    output      logic vsync,    // vertical sync
	 output      logic sync,     // mix sync
    output      logic de,       // data enable (low in blanking intervals)
	 output      logic screen,
    output      logic frame,    // high at start of frame
    output      logic line,     // high at start of active line
    output      logic signed [CORDW-1:0] sx,  // horizontal screen position
    output      logic signed [CORDW-1:0] sy   // vertical screen position
    );

    // horizontal timings
	     
	 localparam signed H_STA  = 0;    // horizontal start
	 localparam signed H_LINE = H_RES-1;	 // screen end
	 localparam signed H_RB = H_LINE + H_BRD-1; // Right Border
	 
    localparam signed HS_STA = H_RB+H_SYNC-1;  	// sync start
	 localparam signed HS_END = H_STA + H_BP-1;  // sync end	
    localparam signed HA_END = HS_END + H_BRD-1;// active end

    // vertical timings	 
	 
    localparam signed V_STA  = 0;    // vertical start
    localparam signed V_HEIGHT = V_RES-1; // screen end 
	 localparam signed V_BB = V_HEIGHT + V_BRD-1; //bottom border
	 
	 localparam signed VS_STA = V_BB + V_SYNC-1; // sync start
    //localparam signed VS_END = VS_STA + V_FP-1; // sync end	 
    localparam signed VA_END = VS_STA + V_BRD-1;// active end

    logic signed [CORDW-1:0] x, y;  // screen position

    // generate horizontal and vertical syncs with correct polarity
    always_ff @(negedge clk_pix) begin
        hsync <= H_POL ? (x > HS_STA && x <= HS_END)
                      : ~(x > HS_STA && x <= HS_END);
        vsync <= V_POL ? (y > VS_STA && y <= VA_END)
                      : ~(y > VS_STA && y <= VA_END);
    end
	 assign sync <= hsync ^ vsync;

    // control signals
    always_ff @(negedge clk_pix) begin
        //de    <= (y >= VA_STA && x >= HA_STA);
		  de    <= (x <= H_RB && y <= V_TB &&  x > HS_END && y > VS_STA);
        frame <= (y == V_STA  && x == H_STA);
        line  <= (y >= VA_STA && x == H_STA);
		  screen <= //( x >=0 && y >= 0 && 
						(x < H_RES && y < V_RES);
        if (rst) frame <= 0;  // don't assert frame in reset
    end

    // calculate horizontal and vertical screen position
    always_ff @(negedge clk_pix) begin
        if (x == HA_END) begin  // last pixel on line?
            x <= H_STA;
            y <= (y == VA_END) ? V_STA : y + 1;  // last line on screen?
        end else begin
            x <= x + 1;
        end
        if (rst) begin
            x <= H_STA;
            y <= V_STA;
        end
    end

    // align screen position with sync and control signals
    always_ff @ (negedge clk_pix) begin
        sx <= x;
        sy <= y;
        if (rst) begin
            sx <= H_STA;
            sy <= V_STA;
        end
    end
endmodule