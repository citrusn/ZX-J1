/* ULA ZX Spectrum video */
`timescale 1ns/1ns
module ula
(
    // 7 МГц 
    // 25.175 МГц VGA 640x480
    input   wire        clk,

    // Выходные данные
    output  reg  [3:0]  VGA_R,
    output  reg  [3:0]  VGA_G,
    output  reg  [3:0]  VGA_B,
    output  reg        HS,
    output  reg        VS,

    // Данные для вывода
    output  reg  [12:0] vaddr,
    input   wire [ 7:0] vdata,
    input   wire [ 2:0] border,

    // Генерация сигнала для IRQ
    output  reg         irq
);
// Экранная область  256*192 пикселей + 32*24 атрибутов = 6912 байтов
reg [7:0] vram[0:6911]; initial $readmemh("picture.hex", vram);

// Тайминги для горизонтальной развертки (448)
parameter horiz_visible = 639//255;
parameter border_left   = 639+ 8 //256;
parameter horiz_back    = 647+40 //301; 
parameter horiz_sync    = 687+96//328;
parameter horiz_front   = 687+96+8//381;
parameter border_right  = 791//417; 
parameter horiz_whole   = 799//447;

// Тайминги для вертикальной развертки (311)

parameter vert_visible = 479 //191;
parameter border_top   = 487//192;
parameter vert_back    = 487+25//224;    
parameter vert_sync    = 512//488+25+2//256;     
parameter vert_front   = 514//260;
parameter border_bottom= 516//285;    
parameter vert_whole   = 524//311;   

reg Blank, Screen;
always @(posedge clk ) begin
  HS = ~ ( x >= (horiz_sync) && x < (horiz_front));
  VS = ~ (y >= (vert_sync)  && y < (vert_front));
  Blank = (x >= horiz_back && x < border_right) || (y>= vert_back && y< border_bottom);
  Screen = x <= horiz_visible && y <= vert_visible;  
end


// В этих регистрах мы будем хранить текущее положение луча на экране
reg [9:0] x = 8'b0;
reg [9:0] y = 8'b0;

always @(negedge clk ) begin
  if (x == horiz_whole)
    x <= 0;
  else 
    x <= x + 1'b1;
end

always @(negedge clk ) begin
  if ( x == horiz_sync )
    if (y == vert_whole)
      y<=0;
    else 
      y<=y+1;
end

// частота моргания flash = 50 /32 =1.56. счетчик flash 5 разрядный
reg [4:0] flash = 5'b0;
always @(negedge y[8] ) begin // y=311->0
  flash <= flash + 1;
  irq = y[8];
end

// Чтобы правильно начинались данные, нужно их выровнять
wire [8:0] X  = x[8:0] - 0;
wire [8:0] Y  = y[8:0] - 0;

reg [7:0] current_char;
reg [7:0] current_attr;
reg [7:0] tmp_char;
reg [7:0] tmp_attr;
reg       Screen1; 

// vid_sel <= '1' when (hcnt(2 downto 1) = "10" and clock = '0') else '0';
// Генератор на 7 Мгц
always @(negedge clk) begin
  // Обязательно надо тут использовать попиксельный выход, а то пиксели наполовину съезжают
  case (x[2:0])
                     // БанкY  СмещениеY ПолубанкY СмещениеX
    4'b000: vaddr <= { Y[7:6], Y[2:0],   Y[5:3],   X[7:3] };  // 2 + 3 + 3 + 5
      
    4'b001: begin
            // Запрос атрибута по x=0..31, y=0..23
                     //  [110] [yyyyy] [xxxxx]
            vaddr <= { 3'b110, Y[7:3], X[7:3] }; // 3 + 5 + 5
            tmp_char <= vram[vaddr];
    end 

    4'b010: tmp_attr <= vram[vaddr];

    4'b111: begin
       current_attr <=  tmp_attr;
       current_char <=  tmp_char;
       Screen1 <= Screen;
    end

    // Подготовка к выводу символа
    //4'b1111: begin
      // Записать в текущий регистр выбранную "маску" битов
      //  current_char <= tmp_current_char;
      // И атрибутов
      // Атрибут в спектруме представляет собой битовую маску
      //  7     6      5 4 3    2 1 0
      // [Flash Bright BgColor  FrColor]
      //current_attr <= vdata;
    //end
  endcase
end

// Получаем текущий бит
wire dot = current_char[ 7^X[2:0] ];

/* R - это бит 1, 4 */
/* G - это бит 2, 5 */
/* B - это бит 0, 3 */

//reg [2:0] selector;
assign selector = { dot, flash[4], current_attr[7] };
always @(posedge clk ) begin
  if (~Blank) begin
    if (~Screen1) begin   
      case (selector)
        3'b000, 3'b010, 3'b011, 3'b101:
          {VGA_R, VGA_G, VGA_B} <= { current_attr[4], current_attr[4] && current_attr[6], 2'b0,
                                     current_attr[5], current_attr[5] && current_attr[6], 2'b0,
                                     current_attr[3], current_attr[3] && current_attr[6], 2'b0};
        3'b001, 3'b100, 3'b110, 3'b111: 
          {VGA_R, VGA_G, VGA_B} <= { current_attr[1], current_attr[1] && current_attr[6], 2'b0,
                                     current_attr[2], current_attr[2] && current_attr[6], 2'b0,
                                     current_attr[0], current_attr[0] && current_attr[6], 2'b0};
      endcase      
    end
    else begin // бордюр
      {VGA_R, VGA_G, VGA_B} <= {border[1], 3'b0, border[2], 3'b0, border[0], 3'b0};
    end
  end
  else begin // только черный
    {VGA_R, VGA_G, VGA_B} <= {4'b0, 4'b0, 4'b0};
  end
end

endmodule